"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _deployDNSSEC = _interopRequireDefault(require("./deployDNSSEC"));

var _utils = require("./utils");

var _table = require("table");

var _namelogger = require("./namelogger");

var _interfaces = require("../constants/interfaces");

var ROOT_NODE = '0x00000000000000000000000000000000'; // ipfs://QmTeW79w7QQ6Npa3b1d5tANreCDxF2iDaAPsDvW6KtLmfB

var contenthash = '0xe301017012204edd2984eeaf3ddf50bac238ec95c5713fb40b5e428b508fdbe55d3b9f155ffe';
var content = '0x736f6d65436f6e74656e74000000000000000000000000000000000000000000';
var ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'; // dnslink based ipns'app.uniswap.org'

var deprecated_contenthash = '0xe5010170000f6170702e756e69737761702e6f7267';

var toBN = require('web3-utils').toBN;

var legacyRegistrarInterfaceId = _interfaces.interfaces.legacyRegistrar,
    permanentRegistrarInterfaceId = _interfaces.interfaces.permanentRegistrar,
    permanentRegistrarWithConfigInterfaceId = _interfaces.interfaces.permanentRegistrarWithConfig,
    bulkRenewalInterfaceId = _interfaces.interfaces.bulkRenewal,
    linearPremiumPriceOracleInterfaceId = _interfaces.interfaces.linearPremiumPriceOracle;

function deployENS(_x) {
  return _deployENS.apply(this, arguments);
}

function _deployENS() {
  _deployENS = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(_ref) {
    var _response;

    var web3, accounts, _ref$dnssec, dnssec, _ref$exponential, exponential, sha3, namehash, nameLogger, registryJSON, resolverJSON, ownedResolverJSON, offchainresolverpath, offchainResolverJSON, oldResolverJSON, reverseRegistrarJSON, priceOracleJSON, linearPremiumPriceOracleJSON, exponentialPremiumPriceOracleJSON, dummyOracleJSON, controllerJSON, bulkRenewalJSON, testRegistrarJSON, legacyAuctionRegistrarSimplifiedJSON, ENSWithFallbackJSON, oldBaseRegistrarJSON, newBaseRegistrarJSON, registrarMigrationJSON, EthRegistrarSubdomainRegistrarJSON, ENSMigrationSubdomainRegistrarJSON, ens, resolver, ownedResolver, GATEWAY_HOST, gatewayUrl, offchainResolver, oldResolver, oldReverseRegistrar, testRegistrar, eightweeks, startTime, legacyAuctionRegistrar, ensContract, resolverContract, ownedResolverContract, oldResolverContract, oldReverseRegistrarContract, testRegistrarContract, legacyAuctionRegistrarContract, tld, tldHash, legacynames, i, lockoutlength, now, priceOracle, oldBaseRegistrar, controller, oldBaseRegistrarContract, controllerContract, newnames, aBitTooAwesome, aBitTooAwesome2, aBitTooAwesome3, otherOwner, addResolverAndRecords, _addResolverAndRecords, contractdomain, current, oldEns, label, oldSubdomainRegistrar, oldSubdomainRegistrarContract, subdomainRegistrar, newEns, newEnsContract, newBaseRegistrar, newBaseRegistrarContract, dummyOracleRate, dummyOracle, dummyOracleContract, latestAnswer, premium, decreaseDuration, decreaseRate, linearPremiumPriceOracle, exponentialPremiumPriceOracle, linearPremiumPriceOracleContract, exponentialPremiumPriceOracleContract, newController, newControllerContract, newResolver, newResolverContract, addNewResolverAndRecords, _addNewResolverAndRecords, bulkRenewal, newTestRegistrar, newReverseRegistrar, registrarMigration, registrarMigrationContract, newTestRegistrarContract, name, domain, labelhash, owner, tx, migrate, setNewResolver, _setNewResolver, baseDays, beforeTime, afterTime, response, config, contractNames, contractAddressesTable, output, labels;

    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _setNewResolver = function _setNewResolver3() {
              _setNewResolver = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(name) {
                return _regenerator["default"].wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        _context4.next = 2;
                        return newEnsContract.setResolver(namehash(name), newResolver._address).send({
                          from: accounts[0]
                        });

                      case 2:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4);
              }));
              return _setNewResolver.apply(this, arguments);
            };

            setNewResolver = function _setNewResolver2(_x6) {
              return _setNewResolver.apply(this, arguments);
            };

            _addNewResolverAndRecords = function _addNewResolverAndRec2() {
              _addNewResolverAndRecords = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(name) {
                var hash;
                return _regenerator["default"].wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        console.log('setting up ', name);
                        hash = namehash(name);
                        console.log('resolver');
                        _context3.next = 5;
                        return newEnsContract.setResolver(hash, newResolver._address).send({
                          from: accounts[0]
                        });

                      case 5:
                        console.log('addr');
                        _context3.next = 8;
                        return newResolverContract.setAddr(hash, newResolver._address).send({
                          from: accounts[0]
                        });

                      case 8:
                        // ipfs://QmTeW79w7QQ6Npa3b1d5tANreCDxF2iDaAPsDvW6KtLmfB
                        console.log('contenthash');
                        _context3.next = 11;
                        return newResolverContract.setContenthash(hash, contenthash).send({
                          gas: 5000000,
                          from: accounts[0]
                        });

                      case 11:
                        console.log('finished setting up', name);

                      case 12:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              }));
              return _addNewResolverAndRecords.apply(this, arguments);
            };

            addNewResolverAndRecords = function _addNewResolverAndRec(_x4) {
              return _addNewResolverAndRecords.apply(this, arguments);
            };

            _addResolverAndRecords = function _addResolverAndRecord2() {
              _addResolverAndRecords = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(name, resolverAddress) {
                var account,
                    hash,
                    _args2 = arguments;
                return _regenerator["default"].wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        account = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : accounts[0];
                        console.log('Setting up ', name, 'with old resolver and records');
                        hash = namehash(name);
                        _context2.next = 5;
                        return ensContract.setResolver(hash, resolverAddress).send({
                          from: account
                        });

                      case 5:
                        _context2.next = 7;
                        return resolverContract.setAddr(hash, resolverAddress).send({
                          from: account
                        });

                      case 7:
                        _context2.next = 9;
                        return resolverContract.setContenthash(hash, contenthash).send({
                          gas: 5000000,
                          from: account
                        });

                      case 9:
                        console.log('finished setting up old resolver and records', name);

                      case 10:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));
              return _addResolverAndRecords.apply(this, arguments);
            };

            addResolverAndRecords = function _addResolverAndRecord(_x2, _x3) {
              return _addResolverAndRecords.apply(this, arguments);
            };

            namehash = function _namehash(name) {
              var node = '0x0000000000000000000000000000000000000000000000000000000000000000';

              if (name !== '') {
                var _labels = name.split('.');

                for (var _i = _labels.length - 1; _i >= 0; _i--) {
                  node = sha3(node + sha3(_labels[_i]).slice(2), {
                    encoding: 'hex'
                  });
                }
              }

              return node.toString();
            };

            web3 = _ref.web3, accounts = _ref.accounts, _ref$dnssec = _ref.dnssec, dnssec = _ref$dnssec === void 0 ? false : _ref$dnssec, _ref$exponential = _ref.exponential, exponential = _ref$exponential === void 0 ? false : _ref$exponential;
            sha3 = web3.utils.sha3;
            console.log({
              dnssec: dnssec,
              exponential: exponential
            });
            nameLogger = new _namelogger.NameLogger({
              sha3: sha3,
              namehash: namehash
            });
            registryJSON = (0, _utils.loadContract)('registry', 'ENSRegistry');
            resolverJSON = (0, _utils.loadContract)('resolvers', 'PublicResolver');
            ownedResolverJSON = (0, _utils.loadContract)('resolvers', 'OwnedResolver');
            offchainresolverpath = "".concat(process.env.PWD, "/node_modules/@ensdomains/offchain-resolver-contracts/artifacts/contracts/OffchainResolver.sol/OffchainResolver.json");
            offchainResolverJSON = require(offchainresolverpath);
            oldResolverJSON = (0, _utils.loadContract)('ens-022', 'PublicResolver');
            reverseRegistrarJSON = (0, _utils.loadContract)('registry', 'ReverseRegistrar');
            priceOracleJSON = (0, _utils.loadContract)('ethregistrar-202', 'SimplePriceOracle');
            linearPremiumPriceOracleJSON = (0, _utils.loadContract)('ethregistrar', 'LinearPremiumPriceOracle');
            exponentialPremiumPriceOracleJSON = (0, _utils.loadContract)('ethregistrar', 'ExponentialPremiumPriceOracle');
            dummyOracleJSON = (0, _utils.loadContract)('ethregistrar', 'DummyOracle');
            controllerJSON = (0, _utils.loadContract)('ethregistrar', 'ETHRegistrarController');
            bulkRenewalJSON = (0, _utils.loadContract)('ethregistrar', 'BulkRenewal');
            testRegistrarJSON = (0, _utils.loadContract)('registry', 'TestRegistrar');
            legacyAuctionRegistrarSimplifiedJSON = (0, _utils.loadContract)('ens-022', 'HashRegistrar');
            ENSWithFallbackJSON = (0, _utils.loadContract)('registry', 'ENSRegistryWithFallback');
            oldBaseRegistrarJSON = (0, _utils.loadContract)('ethregistrar-202', 'OldBaseRegistrarImplementation');
            newBaseRegistrarJSON = (0, _utils.loadContract)('ethregistrar', 'BaseRegistrarImplementation');
            registrarMigrationJSON = (0, _utils.loadContract)('ethregistrar-202', 'RegistrarMigration');
            EthRegistrarSubdomainRegistrarJSON = (0, _utils.loadContract)('subdomain-registrar', 'EthRegistrarSubdomainRegistrar');
            ENSMigrationSubdomainRegistrarJSON = (0, _utils.loadContract)('subdomain-registrar', 'ENSMigrationSubdomainRegistrar');
            console.log('Deploying from account ', accounts[0]);
            /* Deploy the main contracts  */

            _context5.prev = 33;
            _context5.next = 36;
            return (0, _utils.deploy)(web3, accounts[0], registryJSON);

          case 36:
            ens = _context5.sent;
            _context5.next = 39;
            return (0, _utils.deploy)(web3, accounts[0], resolverJSON, ens._address, ZERO_ADDRESS);

          case 39:
            resolver = _context5.sent;
            _context5.next = 42;
            return (0, _utils.deploy)(web3, accounts[0], ownedResolverJSON, ens._address, ZERO_ADDRESS);

          case 42:
            ownedResolver = _context5.sent;
            GATEWAY_HOST = 'http://localhost:8080'; // demo url
            // var GATEWAY_HOST = 'https://offchain-resolver-example.uc.r.appspot.com'

            gatewayUrl = "".concat(GATEWAY_HOST, "/{sender}/{data}.json");
            _context5.next = 47;
            return (0, _utils.deploy)(web3, accounts[0], offchainResolverJSON, gatewayUrl, [accounts[0]]);

          case 47:
            offchainResolver = _context5.sent;
            _context5.next = 50;
            return (0, _utils.deploy)(web3, accounts[0], oldResolverJSON, ens._address);

          case 50:
            oldResolver = _context5.sent;
            _context5.next = 53;
            return (0, _utils.deploy)(web3, accounts[0], reverseRegistrarJSON, ens._address, resolver._address);

          case 53:
            oldReverseRegistrar = _context5.sent;
            _context5.next = 56;
            return (0, _utils.deploy)(web3, accounts[0], testRegistrarJSON, ens._address, namehash('test'));

          case 56:
            testRegistrar = _context5.sent;
            eightweeks = 60 * 60 * 24 * 7 * 8;
            _context5.next = 60;
            return web3.eth.getBlock('latest');

          case 60:
            _context5.t0 = _context5.sent.timestamp;
            _context5.t1 = eightweeks;
            startTime = _context5.t0 - _context5.t1;
            _context5.next = 65;
            return (0, _utils.deploy)(web3, accounts[0], legacyAuctionRegistrarSimplifiedJSON, ens._address, namehash('eth'), startTime);

          case 65:
            legacyAuctionRegistrar = _context5.sent;
            _context5.next = 71;
            break;

          case 68:
            _context5.prev = 68;
            _context5.t2 = _context5["catch"](33);
            console.log('deployment failed', _context5.t2);

          case 71:
            ensContract = ens.methods;
            resolverContract = resolver.methods;
            ownedResolverContract = ownedResolver.methods;
            oldResolverContract = oldResolver.methods;
            oldReverseRegistrarContract = oldReverseRegistrar.methods;
            testRegistrarContract = testRegistrar.methods;
            legacyAuctionRegistrarContract = legacyAuctionRegistrar.methods;
            tld = 'eth';
            tldHash = sha3(tld);
            /* Setup the root TLD */

            _context5.next = 82;
            return ensContract.setSubnodeOwner(ROOT_NODE, tldHash, accounts[0]).send({
              from: accounts[0]
            });

          case 82:
            _context5.next = 84;
            return ensContract.setSubnodeOwner(ROOT_NODE, sha3('test'), accounts[0]).send({
              from: accounts[0]
            });

          case 84:
            _context5.next = 86;
            return ensContract.setResolver(namehash(''), resolver._address).send({
              from: accounts[0]
            });

          case 86:
            _context5.next = 88;
            return ensContract.setResolver(namehash('eth'), resolver._address).send({
              from: accounts[0]
            });

          case 88:
            _context5.next = 90;
            return ensContract.setResolver(namehash('test'), resolver._address).send({
              from: accounts[0]
            });

          case 90:
            _context5.next = 92;
            return ensContract.setSubnodeOwner(ROOT_NODE, sha3('test'), testRegistrar._address).send({
              from: accounts[0]
            });

          case 92:
            _context5.next = 94;
            return ensContract.setSubnodeOwner(ROOT_NODE, sha3('eth'), legacyAuctionRegistrar._address).send({
              from: accounts[0]
            });

          case 94:
            legacynames = ['auctioned2', 'auctioned3'];

            if (!dnssec) {
              _context5.next = 99;
              break;
            }

            console.log('*** Skipping auction to make DNSSEC work');
            _context5.next = 117;
            break;

          case 99:
            _context5.prev = 99;
            i = 0;

          case 101:
            if (!(i < legacynames.length)) {
              _context5.next = 107;
              break;
            }

            _context5.next = 104;
            return (0, _utils.auctionLegacyName)(web3, accounts[0], legacyAuctionRegistrarContract, legacynames[i]);

          case 104:
            i++;
            _context5.next = 101;
            break;

          case 107:
            _context5.next = 112;
            break;

          case 109:
            _context5.prev = 109;
            _context5.t3 = _context5["catch"](99);
            console.log('auctioning Legacy name failed', {
              name: legacynames[i],
              e: _context5.t3
            });

          case 112:
            lockoutlength = 60 * 60 * 24 * 190;
            _context5.next = 115;
            return (0, _utils.advanceTime)(web3, lockoutlength);

          case 115:
            _context5.next = 117;
            return (0, _utils.mine)(web3);

          case 117:
            _context5.next = 119;
            return ensContract.setSubnodeOwner(ROOT_NODE, sha3('reverse'), accounts[0]).send({
              from: accounts[0]
            });

          case 119:
            nameLogger.record('reverse', {
              label: 'reverse'
            });
            _context5.next = 122;
            return ensContract.setSubnodeOwner(namehash('reverse'), sha3('addr'), accounts[0]).send({
              from: accounts[0]
            });

          case 122:
            console.log('setup root reverse with addr label');
            nameLogger.record('addr.reverse', {
              label: 'addr'
            });
            _context5.next = 126;
            return ensContract.setResolver(namehash('addr.reverse'), resolver._address).send({
              from: accounts[0]
            });

          case 126:
            console.log('setup root reverse with public resolver');
            /* Setup the reverse subdomain: addr.reverse */

            _context5.next = 129;
            return ensContract.setSubnodeOwner(namehash('reverse'), sha3('addr'), oldReverseRegistrar._address).send({
              from: accounts[0]
            });

          case 129:
            console.log('setup root reverse with the reverse registrar');
            /* Set the old hash registrar contract as the owner of .eth */

            _context5.next = 132;
            return ensContract.setSubnodeOwner(ROOT_NODE, tldHash, legacyAuctionRegistrar._address).send({
              from: accounts[0]
            });

          case 132:
            nameLogger.record('eth', {
              label: 'eth'
            });
            console.log('Successfully setup old hash registrar');
            _context5.next = 136;
            return web3.eth.getBlock('latest');

          case 136:
            now = _context5.sent.timestamp;
            _context5.next = 139;
            return (0, _utils.deploy)(web3, accounts[0], priceOracleJSON, 1);

          case 139:
            priceOracle = _context5.sent;
            _context5.next = 142;
            return (0, _utils.deploy)(web3, accounts[0], oldBaseRegistrarJSON, ens._address, legacyAuctionRegistrar._address, namehash('eth'), now + 365 * _utils.DAYS);

          case 142:
            oldBaseRegistrar = _context5.sent;
            console.log('Successfully setup base registrar');
            _context5.next = 146;
            return (0, _utils.deploy)(web3, accounts[0], controllerJSON, oldBaseRegistrar._address, priceOracle._address, 2, // 10 mins in seconds
            86400 // 24 hours in seconds
            );

          case 146:
            controller = _context5.sent;
            console.log('Successfully setup permanent registrar controller');
            oldBaseRegistrarContract = oldBaseRegistrar.methods;
            controllerContract = controller.methods;
            console.log('Price oracle deployed at: ', priceOracle._address);
            console.log('Base registrar deployed at: ', oldBaseRegistrar._address);
            console.log('Controller deployed at: ', controller._address);
            _context5.next = 155;
            return ensContract.setSubnodeOwner(ROOT_NODE, tldHash, accounts[0]).send({
              from: accounts[0]
            });

          case 155:
            _context5.prev = 155;
            _context5.next = 158;
            return resolverContract.setInterface(namehash('eth'), legacyRegistrarInterfaceId, legacyAuctionRegistrar._address).send({
              from: accounts[0]
            });

          case 158:
            _context5.next = 163;
            break;

          case 160:
            _context5.prev = 160;
            _context5.t4 = _context5["catch"](155);
            console.log(_context5.t4);

          case 163:
            console.log("Set .eth legacy registrar interface Id to ".concat(legacyAuctionRegistrar._address));
            _context5.next = 166;
            return resolverContract.setInterface(namehash('eth'), permanentRegistrarInterfaceId, controller._address).send({
              from: accounts[0]
            });

          case 166:
            console.log("Set .eth permanent registrar interface Id to ".concat(controller._address));
            /* Set the permanent registrar contract as the owner of .eth */

            _context5.next = 169;
            return ensContract.setSubnodeOwner(ROOT_NODE, tldHash, oldBaseRegistrar._address).send({
              from: accounts[0]
            });

          case 169:
            console.log('Add controller to base registrar');
            _context5.next = 172;
            return oldBaseRegistrarContract.addController(controller._address).send({
              from: accounts[0]
            });

          case 172:
            newnames = ['testing', 'newname', 'resolver', 'oldresolver', 'awesome', 'superawesome', 'notsoawesome', 'abittooawesome', 'abittooawesome2', 'abittooawesome3', 'subdomaindummy', 'contractdomain', 'offchainexample', 'data', 'ens'];
            console.log('Register name');
            _context5.prev = 174;
            i = 0;

          case 176:
            if (!(i < newnames.length)) {
              _context5.next = 183;
              break;
            }

            _context5.next = 179;
            return (0, _utils.registerName)(web3, accounts[0], controllerContract, newnames[i]);

          case 179:
            nameLogger.record("".concat(newnames[i], ".eth"), {
              label: newnames[i]
            });

          case 180:
            i++;
            _context5.next = 176;
            break;

          case 183:
            _context5.next = 188;
            break;

          case 185:
            _context5.prev = 185;
            _context5.t5 = _context5["catch"](174);
            console.log('Failed to register a name', _context5.t5);

          case 188:
            _context5.next = 190;
            return (0, _utils.registerName)(web3, accounts[1], controllerContract, 'otherowner');

          case 190:
            nameLogger.record("otherowner.eth", {
              label: 'otherowner'
            });
            newnames.push('otherowner');
            /* Setup domain with a resolver and addr/content */

            aBitTooAwesome = 'abittooawesome.eth';
            aBitTooAwesome2 = 'abittooawesome2.eth';
            aBitTooAwesome3 = 'abittooawesome3.eth';
            otherOwner = 'otherowner.eth';
            addResolverAndRecords(aBitTooAwesome2, resolver._address);
            addResolverAndRecords(aBitTooAwesome3, resolver._address);
            addResolverAndRecords(otherOwner, resolver._address, accounts[1]);
            contractdomain = namehash('contractdomain.eth');
            _context5.next = 202;
            return ensContract.setResolver(contractdomain, resolver._address).send({
              from: accounts[0]
            });

          case 202:
            _context5.next = 204;
            return resolverContract.setAddr(contractdomain, accounts[0]).send({
              from: accounts[0]
            });

          case 204:
            _context5.next = 206;
            return ensContract.setOwner(contractdomain, testRegistrar._address).send({
              from: accounts[0]
            });

          case 206:
            _context5.next = 208;
            return oldReverseRegistrarContract.setName('abittooawesome.eth').send({
              from: accounts[0],
              gas: 1000000
            });

          case 208:
            /* Point the resolver.eth's resolver to the public resolver */
            console.log('Setting up resolvers');
            _context5.next = 211;
            return ensContract.setResolver(namehash('resolver.eth'), resolver._address).send({
              from: accounts[0]
            });

          case 211:
            _context5.next = 213;
            return ensContract.setResolver(namehash('oldresolver.eth'), oldResolver._address).send({
              from: accounts[0]
            });

          case 213:
            _context5.next = 215;
            return resolverContract.setAddr(namehash('resolver.eth'), resolver._address).send({
              from: accounts[0]
            });

          case 215:
            _context5.next = 217;
            return resolverContract.setAddr(namehash('oldresolver.eth'), oldResolver._address).send({
              from: accounts[0]
            });

          case 217:
            /* Resolve the resolver.eth content to a 32 byte content hash */
            console.log('Setting up contenthash');
            _context5.next = 220;
            return resolverContract.setContenthash(namehash('resolver.eth'), contenthash).send({
              from: accounts[0],
              gas: 5000000
            });

          case 220:
            _context5.next = 222;
            return oldResolverContract.setContent(namehash('oldresolver.eth'), content).send({
              from: accounts[0]
            });

          case 222:
            _context5.next = 224;
            return oldReverseRegistrarContract.setName('eth').send({
              from: accounts[2],
              gas: 1000000
            });

          case 224:
            _context5.next = 226;
            return (0, _utils.mine)(web3);

          case 226:
            _context5.next = 228;
            return web3.eth.getBlock('latest');

          case 228:
            current = _context5.sent;
            console.log("The current time is ".concat(new Date(current.timestamp * 1000)));
            oldEns = ens;
            label = 'notmigrated';
            _context5.next = 234;
            return (0, _utils.registerName)(web3, accounts[0], controllerContract, label);

          case 234:
            nameLogger.record("".concat(label, ".eth"), {
              label: label
            });
            _context5.next = 237;
            return ensContract.setSubnodeOwner(namehash('testing.eth'), sha3('sub1'), accounts[0]).send({
              from: accounts[0]
            });

          case 237:
            nameLogger.record("sub1.testing.eth", {
              label: 'sub1'
            });
            _context5.next = 240;
            return ensContract.setSubnodeOwner(namehash('testing.eth'), sha3('sub2'), accounts[0]).send({
              from: accounts[0]
            });

          case 240:
            _context5.next = 242;
            return ensContract.setResolver(namehash('sub1.testing.eth'), resolver._address).send({
              from: accounts[0]
            });

          case 242:
            _context5.next = 244;
            return ensContract.setResolver(namehash('sub2.testing.eth'), resolver._address).send({
              from: accounts[0]
            });

          case 244:
            _context5.next = 246;
            return resolverContract.setAddr(namehash('sub2.testing.eth'), accounts[0]).send({
              from: accounts[0]
            });

          case 246:
            _context5.next = 248;
            return resolverContract['setAddr(bytes32,uint256,bytes)'](namehash('sub2.testing.eth'), 0, //BTC
            '0x76a91462e907b15cbf27d5425399ebf6f0fb50ebb88f1888ac' //1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
            ).send({
              from: accounts[0]
            });

          case 248:
            _context5.next = 250;
            return resolverContract.setContenthash(namehash('sub2.testing.eth'), contenthash).send({
              gas: 5000000,
              from: accounts[0]
            });

          case 250:
            nameLogger.record("sub2.testing.eth", {
              label: 'sub2'
            });
            _context5.next = 253;
            return ensContract.setSubnodeOwner(namehash('sub2.testing.eth'), sha3('a1'), accounts[0]).send({
              from: accounts[0]
            });

          case 253:
            _context5.next = 255;
            return ensContract.setResolver(namehash('a1.sub2.testing.eth'), resolver._address).send({
              from: accounts[0]
            });

          case 255:
            _context5.next = 257;
            return resolverContract.setAddr(namehash('a1.sub2.testing.eth'), accounts[0]).send({
              from: accounts[0]
            });

          case 257:
            nameLogger.record("a1.sub2.testing.eth", {
              label: 'a1'
            });
            _context5.next = 260;
            return ensContract.setSubnodeOwner(namehash('otherowner.eth'), sha3('sub1'), accounts[0]).send({
              from: accounts[1]
            });

          case 260:
            _context5.next = 262;
            return ensContract.setResolver(namehash('sub1.otherowner.eth'), resolver._address).send({
              from: accounts[0]
            });

          case 262:
            _context5.next = 264;
            return resolverContract.setAddr(namehash('sub1.otherowner.eth'), accounts[0]).send({
              from: accounts[0]
            });

          case 264:
            nameLogger.record("sub1.otherowner.eth", {
              label: 'sub1'
            });
            _context5.next = 267;
            return ensContract.setSubnodeOwner(namehash('otherowner.eth'), sha3('sub2'), accounts[1]).send({
              from: accounts[1]
            });

          case 267:
            _context5.next = 269;
            return ensContract.setResolver(namehash('sub2.otherowner.eth'), resolver._address).send({
              from: accounts[1]
            });

          case 269:
            _context5.next = 271;
            return resolverContract.setAddr(namehash('sub2.otherowner.eth'), accounts[1]).send({
              from: accounts[1]
            });

          case 271:
            nameLogger.record("sub2.otherowner.eth", {
              label: 'sub2'
            });
            _context5.next = 274;
            return ensContract.setSubnodeOwner(namehash('testing.eth'), sha3('sub4'), accounts[1]).send({
              from: accounts[0]
            });

          case 274:
            _context5.next = 276;
            return ensContract.setResolver(namehash('sub4.testing.eth'), resolver._address).send({
              from: accounts[1]
            });

          case 276:
            _context5.next = 278;
            return resolverContract.setAddr(namehash('sub4.testing.eth'), accounts[0]).send({
              from: accounts[1]
            });

          case 278:
            _context5.next = 280;
            return resolverContract['setAddr(bytes32,uint256,bytes)'](namehash('sub4.testing.eth'), 0, //BTC
            '0x76a91462e907b15cbf27d5425399ebf6f0fb50ebb88f1888ac' //1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
            ).send({
              from: accounts[1]
            });

          case 280:
            nameLogger.record("sub4.testing.eth", {
              label: 'sub4'
            });
            _context5.next = 283;
            return (0, _utils.deploy)(web3, accounts[0], EthRegistrarSubdomainRegistrarJSON, ens._address);

          case 283:
            oldSubdomainRegistrar = _context5.sent;
            oldSubdomainRegistrarContract = oldSubdomainRegistrar.methods; // Create the new subdomain registrar

            _context5.next = 287;
            return (0, _utils.deploy)(web3, accounts[0], ENSMigrationSubdomainRegistrarJSON, ens._address);

          case 287:
            subdomainRegistrar = _context5.sent;
            _context5.next = 290;
            return (0, _utils.deploy)(web3, accounts[0], ENSWithFallbackJSON, oldEns._address);

          case 290:
            newEns = _context5.sent;
            newEnsContract = newEns.methods;
            _context5.next = 294;
            return (0, _utils.deploy)(web3, accounts[0], newBaseRegistrarJSON, newEns._address, namehash('eth'));

          case 294:
            newBaseRegistrar = _context5.sent;
            newBaseRegistrarContract = newBaseRegistrar.methods;
            _context5.next = 298;
            return newBaseRegistrarContract.addController(accounts[0]).send({
              from: accounts[0]
            });

          case 298:
            // Create the new controller
            console.log('Going to set dummy oracle'); // Dummy oracle with 1 ETH == 3000 USD

            dummyOracleRate = toBN(300000000 * 1000);
            _context5.next = 302;
            return (0, _utils.deploy)(web3, accounts[0], dummyOracleJSON, dummyOracleRate);

          case 302:
            dummyOracle = _context5.sent;
            dummyOracleContract = dummyOracle.methods;
            _context5.next = 306;
            return dummyOracleContract.latestAnswer().call();

          case 306:
            latestAnswer = _context5.sent;
            console.log('Dummy USD Rate', {
              latestAnswer: latestAnswer
            });
            premium = toBN('100000000000000000000000'); // 100000 * 1e18

            decreaseDuration = toBN(28 * _utils.DAYS);
            decreaseRate = premium.div(decreaseDuration);
            _context5.next = 313;
            return (0, _utils.deploy)(web3, accounts[0], linearPremiumPriceOracleJSON, dummyOracle._address, // Oracle prices from https://etherscan.io/address/0xb9d374d0fe3d8341155663fae31b7beae0ae233a#events
            // 0,0, 127, 32, 1
            [0, 0, toBN(20294266869609), toBN(5073566717402), toBN(158548959919)], premium, decreaseRate);

          case 313:
            linearPremiumPriceOracle = _context5.sent;
            _context5.next = 316;
            return (0, _utils.deploy)(web3, accounts[0], exponentialPremiumPriceOracleJSON, dummyOracle._address, // Oracle prices from https://etherscan.io/address/0xb9d374d0fe3d8341155663fae31b7beae0ae233a#events
            // 0,0, 127, 32, 1
            // [0, 0, toBN(20294266869609), toBN(5073566717402), toBN(158548959919)],
            [0, 0, toBN(20294266869609), toBN(5073566717402), toBN(158548959919)], 21);

          case 316:
            exponentialPremiumPriceOracle = _context5.sent;
            linearPremiumPriceOracleContract = linearPremiumPriceOracle.methods;
            exponentialPremiumPriceOracleContract = exponentialPremiumPriceOracle.methods;
            _context5.next = 321;
            return (0, _utils.deploy)(web3, accounts[0], controllerJSON, newBaseRegistrar._address, exponential ? exponentialPremiumPriceOracle._address : linearPremiumPriceOracle._address, 2, // 10 mins in seconds
            86400 // 24 hours in seconds
            );

          case 321:
            newController = _context5.sent;
            newControllerContract = newController.methods; // Create the new resolver

            _context5.next = 325;
            return (0, _utils.deploy)(web3, accounts[0], resolverJSON, newEns._address, ZERO_ADDRESS);

          case 325:
            newResolver = _context5.sent;
            newResolverContract = newResolver.methods; // Set resolver to the new ENS

            _context5.next = 329;
            return (0, _utils.deploy)(web3, accounts[0], bulkRenewalJSON, newEns._address);

          case 329:
            bulkRenewal = _context5.sent;

            if (!dnssec) {
              _context5.next = 333;
              break;
            }

            _context5.next = 333;
            return (0, _deployDNSSEC["default"])(web3, accounts, newEns, newResolver);

          case 333:
            _context5.next = 335;
            return newEnsContract.setSubnodeOwner(ROOT_NODE, sha3('eth'), accounts[0]).send({
              from: accounts[0]
            });

          case 335:
            _context5.next = 337;
            return newEnsContract.setResolver(namehash('eth'), ownedResolver._address).send({
              from: accounts[0],
              gas: 6000000
            });

          case 337:
            _context5.next = 339;
            return ownedResolverContract.setInterface(namehash('eth'), permanentRegistrarInterfaceId, newController._address).send({
              from: accounts[0]
            });

          case 339:
            _context5.next = 341;
            return ownedResolverContract.setInterface(namehash('eth'), permanentRegistrarWithConfigInterfaceId, newController._address).send({
              from: accounts[0]
            });

          case 341:
            if (dnssec) {
              _context5.next = 344;
              break;
            }

            _context5.next = 344;
            return ownedResolverContract.setInterface(namehash('eth'), legacyRegistrarInterfaceId, legacyAuctionRegistrar._address).send({
              from: accounts[0]
            });

          case 344:
            _context5.next = 346;
            return ownedResolverContract.setInterface(namehash('eth'), bulkRenewalInterfaceId, bulkRenewal._address).send({
              from: accounts[0]
            });

          case 346:
            _context5.next = 348;
            return ownedResolverContract.setInterface(namehash('eth'), linearPremiumPriceOracleInterfaceId, exponential ? exponentialPremiumPriceOracle._address : linearPremiumPriceOracle._address).send({
              from: accounts[0]
            });

          case 348:
            _context5.next = 350;
            return newEnsContract.setSubnodeOwner(ROOT_NODE, sha3('eth'), newBaseRegistrar._address).send({
              from: accounts[0]
            });

          case 350:
            nameLogger.record('eth', {
              label: 'eth',
              migrated: true
            });
            _context5.next = 353;
            return (0, _utils.deploy)(web3, accounts[0], testRegistrarJSON, newEns._address, namehash('test'));

          case 353:
            newTestRegistrar = _context5.sent;
            newTestRegistrarContract = newTestRegistrar.methods;
            _context5.next = 357;
            return newEnsContract.setSubnodeOwner(ROOT_NODE, sha3('test'), newTestRegistrar._address).send({
              from: accounts[0]
            });

          case 357:
            nameLogger.record('test', {
              label: 'test',
              migrated: true
            });
            _context5.next = 360;
            return (0, _utils.deploy)(web3, accounts[0], reverseRegistrarJSON, newEns._address, newResolver._address);

          case 360:
            newReverseRegistrar = _context5.sent;
            _context5.next = 363;
            return (0, _utils.deploy)(web3, accounts[0], registrarMigrationJSON, oldBaseRegistrar._address, newBaseRegistrar._address, oldSubdomainRegistrar._address, subdomainRegistrar._address);

          case 363:
            registrarMigration = _context5.sent;
            registrarMigrationContract = registrarMigration.methods;
            _context5.next = 367;
            return newBaseRegistrarContract.addController(registrarMigration._address).send({
              from: accounts[0]
            });

          case 367:
            _context5.next = 369;
            return ensContract.setSubnodeOwner(ROOT_NODE, sha3('eth'), registrarMigration._address).send({
              from: accounts[0]
            });

          case 369:
            console.log('Migrating permanent registrar names');
            _context5.prev = 370;
            i = 0;

          case 372:
            if (!(i < newnames.length)) {
              _context5.next = 394;
              break;
            }

            name = newnames[i];
            domain = "".concat(name, ".eth");
            labelhash = sha3(name);
            nameLogger.record(domain, {
              label: name,
              migrated: true
            });
            _context5.next = 379;
            return ensContract.owner(namehash(domain));

          case 379:
            owner = _context5.sent;

            if (!(owner === accounts[0])) {
              _context5.next = 387;
              break;
            }

            _context5.next = 383;
            return ensContract.setTTL(namehash(domain), 123).send({
              from: accounts[0]
            });

          case 383:
            _context5.next = 385;
            return ensContract.setResolver(namehash(domain), newResolver._address).send({
              from: accounts[0]
            });

          case 385:
            _context5.next = 388;
            break;

          case 387:
            console.log("".concat(domain, " is not owned by ").concat(accounts[0], " hence not setting ttl nor resolver"));

          case 388:
            _context5.next = 390;
            return registrarMigrationContract.migrate(labelhash).send({
              from: accounts[0],
              gas: 6000000
            });

          case 390:
            tx = _context5.sent;

          case 391:
            i++;
            _context5.next = 372;
            break;

          case 394:
            _context5.next = 399;
            break;

          case 396:
            _context5.prev = 396;
            _context5.t6 = _context5["catch"](370);
            console.log('Failed to migrate a name', _context5.t6);

          case 399:
            if (dnssec) {
              _context5.next = 419;
              break;
            }

            console.log('Migrate legacy names');
            _context5.prev = 401;

            migrate = /*#__PURE__*/function () {
              var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(label) {
                var name, domain, labelhash, tx;
                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        name = label;
                        domain = "".concat(name, ".eth");
                        labelhash = sha3(name);
                        console.log("Migrate legacy ".concat(domain));
                        _context.next = 6;
                        return ensContract.setResolver(namehash(domain), resolver._address).send({
                          from: accounts[0]
                        });

                      case 6:
                        _context.next = 8;
                        return ensContract.setTTL(namehash(domain), 123).send({
                          from: accounts[0]
                        });

                      case 8:
                        _context.next = 10;
                        return registrarMigrationContract.migrateLegacy(labelhash).send({
                          from: accounts[0],
                          gas: 6000000
                        });

                      case 10:
                        tx = _context.sent;

                      case 11:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function migrate(_x5) {
                return _ref2.apply(this, arguments);
              };
            }();

            i = 0;

          case 404:
            if (!(i < legacynames.length)) {
              _context5.next = 411;
              break;
            }

            _context5.next = 407;
            return migrate(legacynames[i]);

          case 407:
            nameLogger.record("".concat(legacynames[i], ".eth"), {
              label: legacynames[i],
              migrated: true
            });

          case 408:
            i++;
            _context5.next = 404;
            break;

          case 411:
            _context5.next = 416;
            break;

          case 413:
            _context5.prev = 413;
            _context5.t7 = _context5["catch"](401);
            console.log('Failed to migrate a name', _context5.t7);

          case 416:
            console.log("Releasing the deed of auctioned2");
            _context5.next = 419;
            return legacyAuctionRegistrarContract.releaseDeed(sha3('auctioned2')).send({
              from: accounts[0]
            });

          case 419:
            _context5.next = 421;
            return newEnsContract.setResolver(namehash('resolver.eth'), newResolver._address).send({
              from: accounts[0]
            });

          case 421:
            console.log('Set resolver.eth address to new resovler address', newResolver._address);
            _context5.next = 424;
            return newResolverContract.setAddr(namehash('resolver.eth'), newResolver._address).send({
              from: accounts[0]
            });

          case 424:
            _context5.next = 426;
            return newEnsContract.setSubnodeOwner(namehash('testing.eth'), sha3('sub3'), accounts[0]).send({
              from: accounts[0]
            });

          case 426:
            nameLogger.record('testing.eth', {
              label: 'sub3',
              migrated: true
            });
            _context5.next = 429;
            return setNewResolver('notsoawesome.eth');

          case 429:
            _context5.next = 431;
            return addNewResolverAndRecords('abittooawesome.eth');

          case 431:
            /* Setup some domains for subdomain testing */
            console.log('Setting up subdomaindummy.eth');
            _context5.next = 434;
            return newEnsContract.setSubnodeOwner(namehash('subdomaindummy.eth'), sha3('original'), accounts[0]).send({
              from: accounts[0]
            });

          case 434:
            // Change the controller from migration registrarMigration to controller
            nameLogger.record('original.subdomaindummy.eth', {
              label: 'original',
              migrated: true
            });
            console.log("Add Controller ".concat(newController._address, "  to new base registrar"));
            _context5.next = 438;
            return newBaseRegistrarContract.addController(newController._address).send({
              from: accounts[0]
            });

          case 438:
            _context5.next = 440;
            return (0, _utils.registerName)(web3, accounts[0], newControllerContract, 'aftermigration');

          case 440:
            _context5.next = 442;
            return (0, _utils.registerName)(web3, accounts[0], newControllerContract, 'postmigration');

          case 442:
            nameLogger.record('postmigration.eth', {
              label: 'postmigration',
              migrated: true
            });
            _context5.next = 445;
            return newEnsContract.setSubnodeOwner(ROOT_NODE, sha3('reverse'), accounts[1]).send({
              from: accounts[0]
            });

          case 445:
            nameLogger.record('reverse', {
              label: 'reverse',
              migrated: true
            });
            _context5.next = 448;
            return newEnsContract.setSubnodeOwner(namehash('reverse'), sha3('addr'), newReverseRegistrar._address).send({
              from: accounts[1]
            });

          case 448:
            nameLogger.record('addr.reverse', {
              label: 'addr',
              migrated: true
            });
            _context5.next = 451;
            return newTestRegistrarContract.register(sha3('example'), accounts[0]).send({
              from: accounts[0]
            });

          case 451:
            nameLogger.record('example.test', {
              label: 'example',
              migrated: true
            });
            baseDays = 60;
            _context5.t8 = Date;
            _context5.next = 456;
            return web3.eth.getBlock('latest');

          case 456:
            _context5.t9 = _context5.sent.timestamp;
            _context5.t10 = _context5.t9 * 1000;
            beforeTime = new _context5.t8(_context5.t10);
            _context5.next = 461;
            return (0, _utils.registerName)(web3, accounts[0], newControllerContract, 'justreleased', baseDays * _utils.DAYS);

          case 461:
            _context5.next = 463;
            return (0, _utils.registerName)(web3, accounts[0], newControllerContract, 'threedayspast', (baseDays - 3) * _utils.DAYS);

          case 463:
            nameLogger.record('threedayspast', {
              label: 'threedayspast',
              migrated: true
            });
            _context5.next = 466;
            return (0, _utils.registerName)(web3, accounts[0], newControllerContract, 'released', (baseDays - 15) * _utils.DAYS);

          case 466:
            nameLogger.record('released', {
              label: 'released',
              migrated: true
            });
            _context5.next = 469;
            return (0, _utils.registerName)(web3, accounts[0], newControllerContract, 'rele', (baseDays - 15) * _utils.DAYS);

          case 469:
            nameLogger.record('rele', {
              label: 'rele',
              migrated: true
            });
            _context5.next = 472;
            return (0, _utils.registerName)(web3, accounts[0], newControllerContract, 'rel', (baseDays - 15) * _utils.DAYS);

          case 472:
            nameLogger.record('rel', {
              label: 'rel',
              migrated: true
            });
            _context5.next = 475;
            return (0, _utils.registerName)(web3, accounts[0], newControllerContract, 'onedaypremium', (baseDays - 20) * _utils.DAYS);

          case 475:
            nameLogger.record('onedaypremium', {
              label: 'onedaypremium',
              migrated: true
            });
            _context5.next = 478;
            return (0, _utils.registerName)(web3, accounts[0], newControllerContract, 'halfdaypremium', (baseDays - 20.5) * _utils.DAYS);

          case 478:
            nameLogger.record('halfdaypremium', {
              label: 'halfdaypremium',
              migrated: true
            });
            nameLogger.record('justreleased', {
              label: 'justreleased',
              migrated: true
            });

            if (dnssec) {
              _context5.next = 485;
              break;
            }

            _context5.next = 483;
            return (0, _utils.advanceTime)(web3, (baseDays + 90) * _utils.DAYS + 1);

          case 483:
            _context5.next = 485;
            return (0, _utils.mine)(web3);

          case 485:
            _context5.t11 = Date;
            _context5.next = 488;
            return web3.eth.getBlock('latest');

          case 488:
            _context5.t12 = _context5.sent.timestamp;
            _context5.t13 = _context5.t12 * 1000;
            afterTime = new _context5.t11(_context5.t13);
            console.log({
              beforeTime: beforeTime,
              afterTime: afterTime
            });
            _context5.next = 494;
            return newEnsContract.setSubnodeOwner(namehash('data.eth'), sha3('eth-usd'), accounts[0]).send({
              from: accounts[0]
            });

          case 494:
            _context5.next = 496;
            return newEnsContract.setSubnodeOwner(namehash('ens.eth'), sha3('oracle'), accounts[0]).send({
              from: accounts[0]
            });

          case 496:
            _context5.next = 498;
            return addNewResolverAndRecords('eth-usd.data.eth');

          case 498:
            _context5.next = 500;
            return newResolverContract.setAddr(namehash('eth-usd.data.eth'), dummyOracle._address).send({
              from: accounts[0]
            });

          case 500:
            _context5.next = 502;
            return ownedResolverContract.setText(namehash('eth'), 'oracle', exponential ? 'exponential' : 'linear').send({
              from: accounts[0]
            });

          case 502:
            _context5.next = 504;
            return newEnsContract.setResolver(namehash('abittooawesome2.eth'), newResolver._address).send({
              from: accounts[0]
            });

          case 504:
            _context5.next = 506;
            return newResolverContract.setContenthash(namehash('abittooawesome2.eth'), deprecated_contenthash).send({
              from: accounts[0]
            });

          case 506:
            _context5.next = 508;
            return newEnsContract.setResolver(namehash('offchainexample.eth'), offchainResolver._address).send({
              from: accounts[0]
            });

          case 508:
            response = (_response = {
              emptyAddress: '0x0000000000000000000000000000000000000000',
              ownerAddress: accounts[0],
              bulkRenewalAddress: bulkRenewal._address,
              legacyAuctionRegistrarAddress: legacyAuctionRegistrar._address,
              oldEnsAddress: ens._address,
              oldContentResolverAddresses: [oldResolver._address],
              oldResolverAddresses: [resolver._address, oldResolver._address],
              oldControllerAddress: controller._address,
              oldBaseRegistrarAddress: oldBaseRegistrar._address,
              reverseRegistrarAddress: oldReverseRegistrar._address,
              ensAddress: newEns._address,
              registrarMigration: registrarMigration && registrarMigration._address,
              resolverAddress: newResolver._address
            }, (0, _defineProperty2["default"])(_response, "reverseRegistrarAddress", newReverseRegistrar && newReverseRegistrar._address), (0, _defineProperty2["default"])(_response, "reverseRegistrarOwnerAddress", accounts[0]), (0, _defineProperty2["default"])(_response, "controllerAddress", newController._address), (0, _defineProperty2["default"])(_response, "baseRegistrarAddress", newBaseRegistrar._address), (0, _defineProperty2["default"])(_response, "exponentialPremiumPriceOracle", exponentialPremiumPriceOracle._address), (0, _defineProperty2["default"])(_response, "dummyOracle", dummyOracle._address), (0, _defineProperty2["default"])(_response, "offchainResolver", offchainResolver._address), _response);
            config = {
              columns: {
                0: {
                  alignment: 'left',
                  width: 30
                },
                1: {
                  alignment: 'center',
                  width: 50
                }
              }
            };
            contractNames = Object.keys(response);
            contractAddressesTable = contractNames.map(function (key) {
              return [key, response[key]];
            });
            output = (0, _table.table)(contractAddressesTable, config);
            console.log('Deployed contracts');
            console.log(output);
            console.log('Names');
            labels = nameLogger.generateTable();
            response.labels = {};
            labels.map(function (l, i) {
              return i !== 0 ? response.labels[l[3].slice(2)] = l[2] : null;
            });
            console.log(nameLogger.print());
            return _context5.abrupt("return", response);

          case 521:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, null, [[33, 68], [99, 109], [155, 160], [174, 185], [370, 396], [401, 413]]);
  }));
  return _deployENS.apply(this, arguments);
}

var _default = deployENS;
exports["default"] = _default;
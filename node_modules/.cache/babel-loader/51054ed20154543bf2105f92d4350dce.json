{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/Dojoji/src/contexts/wallet.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect, useContext, createContext, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport { CACHE_WALLET_KEY, NETWORK_MAINNET } from 'config';\nimport cache from 'utils/cache';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext(null);\nexport const WalletProvider = ({\n  children\n}) => {\n  _s();\n\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [network, setNetwork] = useState(null);\n  const [chainid, setChainID] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [address, setAddress] = useState(null);\n  const startConnecting = useCallback(() => setIsConnecting(true), [setIsConnecting]);\n  const stopConnecting = useCallback(() => setIsConnecting(false), [setIsConnecting]);\n  const setProvider = useCallback(async web3Provider => {\n    web3Provider.on('accountsChanged', () => {\n      window.location.reload();\n    });\n    web3Provider.on('chainChanged', () => {\n      window.location.reload();\n    }); // web3Provider.on('disconnect', () => {\n    //   disconnect();\n    // });\n\n    const provider = new ethers.providers.Web3Provider(web3Provider);\n    const {\n      name: network\n    } = await provider.getNetwork();\n    const {\n      chainId: chainid\n    } = await provider.getNetwork();\n    setChainID(chainid);\n    setNetwork(~['homestead'].indexOf(network) ? NETWORK_MAINNET : network);\n    const signer = provider.getSigner();\n    setSigner(signer);\n    setAddress(await signer.getAddress());\n    stopConnecting();\n  }, [stopConnecting]);\n  const connectMetamask = useCallback(async () => {\n    if (!window.ethereum) return;\n    await window.ethereum.enable();\n    cache(CACHE_WALLET_KEY, 'metamask');\n    await setProvider(window.ethereum);\n  }, [setProvider]);\n\n  async function disconnect() {\n    cache(CACHE_WALLET_KEY, null);\n    setSigner(null);\n    setAddress(null);\n    setNetwork(null);\n    setChainID(null);\n  }\n\n  const changechain = useCallback(async () => {\n    if (!window.ethereum) return;\n    window.ethereum.request({\n      method: 'wallet_addEthereumChain',\n      params: [{\n        chainId: '0x' + '10',\n        // A 0x-prefixed hexadecimal string\n        chainName: 'Optimism',\n        nativeCurrency: {\n          name: 'ETH',\n          symbol: 'ETH',\n          decimals: 18\n        },\n        rpcUrls: 'https://mainnet.optimism.io',\n        blockExplorerUrls: 'https://optimistic.etherscan.io'\n      }]\n    });\n    await setProvider(window.ethereum);\n  }, [setProvider]);\n  useEffect(() => {\n    const load = async () => {\n      if (address) return;\n      const cachedWallet = cache(CACHE_WALLET_KEY);\n\n      if (cachedWallet) {\n        var _c$cachedWallet;\n\n        const c = {\n          metamask: connectMetamask\n        };\n        (_c$cachedWallet = c[cachedWallet]) === null || _c$cachedWallet === void 0 ? void 0 : _c$cachedWallet.call(c);\n      }\n    };\n\n    load();\n  }, [address, connectMetamask]);\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: {\n      network,\n      chainid,\n      signer,\n      address,\n      isConnecting,\n      startConnecting,\n      stopConnecting,\n      disconnect,\n      changechain,\n      connectMetamask\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WalletProvider, \"iZwt3SnzA8Kzuzv7F3SYPnzorgA=\");\n\n_c = WalletProvider;\nexport function useWallet() {\n  _s2();\n\n  const context = useContext(WalletContext);\n\n  if (!context) {\n    throw new Error('Missing Wallet context');\n  }\n\n  const {\n    network,\n    chainid,\n    signer,\n    address,\n    isConnecting,\n    startConnecting,\n    stopConnecting,\n    disconnect,\n    changechain,\n    connectMetamask\n  } = context;\n  return {\n    network,\n    chainid,\n    signer,\n    address,\n    isConnecting,\n    startConnecting,\n    stopConnecting,\n    disconnect,\n    changechain,\n    connectMetamask\n  };\n}\n\n_s2(useWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Dojoji/src/contexts/wallet.tsx"],"names":["useState","useEffect","useContext","createContext","useCallback","ethers","CACHE_WALLET_KEY","NETWORK_MAINNET","cache","WalletContext","WalletProvider","children","isConnecting","setIsConnecting","network","setNetwork","chainid","setChainID","signer","setSigner","address","setAddress","startConnecting","stopConnecting","setProvider","web3Provider","on","window","location","reload","provider","providers","Web3Provider","name","getNetwork","chainId","indexOf","getSigner","getAddress","connectMetamask","ethereum","enable","disconnect","changechain","request","method","params","chainName","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","load","cachedWallet","c","metamask","useWallet","context","Error"],"mappings":"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","sourcesContent":["import {\n  FC,\n  useState,\n  useEffect,\n  useContext,\n  createContext,\n  ReactNode,\n  useCallback,\n} from 'react';\nimport { ethers } from 'ethers';\nimport { CACHE_WALLET_KEY, NETWORK_MAINNET } from 'config';\nimport cache from 'utils/cache';\n\nconst WalletContext = createContext<{\n  network: string | null;\n  chainid: number | null;\n\n  signer: ethers.Signer | null;\n  address: string | null;\n\n  isConnecting: boolean;\n  startConnecting: () => void;\n  stopConnecting: () => void;\n  disconnect: () => void;\n  changechain: () => void;\n\n  connectMetamask: () => void;\n} | null>(null);\n\nexport const WalletProvider: FC<{ children: ReactNode }> = ({ children }) => {\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [network, setNetwork] = useState<string | null>(null);\n  const [chainid, setChainID] = useState<number | null>(null);\n  const [signer, setSigner] = useState<ethers.Signer | null>(null);\n  const [address, setAddress] = useState<string | null>(null);\n\n  const startConnecting = useCallback(() => setIsConnecting(true), [\n    setIsConnecting,\n  ]);\n  const stopConnecting = useCallback(() => setIsConnecting(false), [\n    setIsConnecting,\n  ]);\n\n  const setProvider = useCallback(\n    async (web3Provider: any) => {\n      web3Provider.on('accountsChanged', () => {\n        window.location.reload();\n      });\n      web3Provider.on('chainChanged', () => {\n        window.location.reload();\n      });\n      // web3Provider.on('disconnect', () => {\n      //   disconnect();\n      // });\n      const provider = new ethers.providers.Web3Provider(web3Provider);\n\n      const { name: network } = await provider.getNetwork();\n      const { chainId: chainid } = await provider.getNetwork();\n      setChainID(chainid);\n      setNetwork(~['homestead'].indexOf(network) ? NETWORK_MAINNET : network);\n\n      const signer = provider.getSigner();\n      setSigner(signer);\n      setAddress(await signer.getAddress());\n      stopConnecting();\n    },\n    [stopConnecting]\n  );\n\n  const connectMetamask = useCallback(async () => {\n    if (!window.ethereum) return;\n    await window.ethereum.enable();\n    cache(CACHE_WALLET_KEY, 'metamask');\n\n    await setProvider(window.ethereum);\n  }, [setProvider]);\n\n  async function disconnect() {\n    cache(CACHE_WALLET_KEY, null);\n    setSigner(null);\n    setAddress(null);\n    setNetwork(null);\n    setChainID(null);\n  }\n  const changechain = useCallback(async () => {\n    if (!window.ethereum) return;\n    window.ethereum.request({\n      method: 'wallet_addEthereumChain',\n      params: [\n        {\n          chainId: '0x' + '10', // A 0x-prefixed hexadecimal string\n          chainName: 'Optimism',\n          nativeCurrency: {\n            name: 'ETH',\n            symbol: 'ETH',\n            decimals: 18,\n          },\n          rpcUrls: 'https://mainnet.optimism.io',\n          blockExplorerUrls: 'https://optimistic.etherscan.io',\n        },\n      ],\n    });\n    await setProvider(window.ethereum);\n  }, [setProvider]);\n\n  useEffect(() => {\n    const load = async () => {\n      if (address) return;\n\n      const cachedWallet = cache(CACHE_WALLET_KEY);\n      if (cachedWallet) {\n        const c: Record<string, () => void> = {\n          metamask: connectMetamask,\n        };\n        c[cachedWallet]?.();\n      }\n    };\n\n    load();\n  }, [address, connectMetamask]);\n\n  return (\n    <WalletContext.Provider\n      value={{\n        network,\n        chainid,\n\n        signer,\n        address,\n\n        isConnecting,\n        startConnecting,\n        stopConnecting,\n        disconnect,\n        changechain,\n        connectMetamask,\n      }}\n    >\n      {children}\n    </WalletContext.Provider>\n  );\n};\n\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error('Missing Wallet context');\n  }\n  const {\n    network,\n    chainid,\n\n    signer,\n    address,\n\n    isConnecting,\n    startConnecting,\n    stopConnecting,\n    disconnect,\n    changechain,\n    connectMetamask,\n  } = context;\n\n  return {\n    network,\n    chainid,\n    signer,\n    address,\n\n    isConnecting,\n    startConnecting,\n    stopConnecting,\n    disconnect,\n    changechain,\n    connectMetamask,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
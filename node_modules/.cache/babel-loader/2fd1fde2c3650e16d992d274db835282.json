{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport { useWallet } from 'contexts/wallet';\nimport { useContracts } from 'contexts/contracts';\nimport { useNotifications } from 'contexts/notifications';\nimport { useData } from 'contexts/data';\n\nconst usePosition = tokenId => {\n  _s();\n\n  const {\n    tx\n  } = useNotifications();\n  const {\n    address\n  } = useWallet();\n  const {\n    nftManagerPositionsContract,\n    stakingRewardsContract\n  } = useContracts();\n  const {\n    currentIncentive\n  } = useData();\n  const [isWorking, setIsWorking] = useState(null);\n  const approve = useCallback(async next => {\n    if (!(nftManagerPositionsContract && stakingRewardsContract && currentIncentive)) return;\n\n    try {\n      setIsWorking('Approving...');\n      await tx('Approving...', 'Approved!', () => nftManagerPositionsContract.approve(stakingRewardsContract.address, tokenId));\n      next();\n    } catch (e) {\n      console.warn(e);\n    } finally {\n      setIsWorking(null);\n    }\n  }, [tokenId, currentIncentive, stakingRewardsContract, nftManagerPositionsContract, tx]);\n  const transfer = useCallback(async next => {\n    if (!(address && nftManagerPositionsContract && stakingRewardsContract && currentIncentive)) return;\n\n    try {\n      setIsWorking('Transfering...');\n      await tx('Transfering...', 'Transfered!', () => nftManagerPositionsContract['safeTransferFrom(address,address,uint256)'](address, stakingRewardsContract.address, tokenId) // https://stackoverflow.com/questions/68289806/no-safetransferfrom-function-in-ethers-js-contract-instance\n      );\n      next();\n    } catch (e) {\n      console.warn(e);\n    } finally {\n      setIsWorking(null);\n    }\n  }, [tokenId, currentIncentive, stakingRewardsContract, nftManagerPositionsContract, address, tx]);\n  const stake = useCallback(async next => {\n    if (!(stakingRewardsContract && currentIncentive)) return;\n\n    try {\n      setIsWorking('Staking...');\n      await tx('Staking...', 'Staked!', () => stakingRewardsContract.stakeToken(currentIncentive.key, tokenId));\n      next();\n    } catch (e) {\n      console.warn(e);\n    } finally {\n      setIsWorking(null);\n    }\n  }, [tokenId, currentIncentive, stakingRewardsContract, tx]);\n  const unstake = useCallback(async next => {\n    if (!(stakingRewardsContract && currentIncentive)) return;\n\n    try {\n      setIsWorking('Unstaking...');\n      await tx('Unstaking...', 'Unstaked!', () => stakingRewardsContract.unstakeToken(currentIncentive.key, tokenId));\n      next();\n    } catch (e) {\n      console.warn(e);\n    } finally {\n      setIsWorking(null);\n    }\n  }, [tokenId, currentIncentive, stakingRewardsContract, tx]);\n  const claim = useCallback(async next => {\n    if (!(stakingRewardsContract && currentIncentive && address)) return;\n\n    try {\n      setIsWorking('Claiming...');\n      const reward = await stakingRewardsContract.rewards(currentIncentive.key.rewardToken, address);\n      await tx('Claiming...', 'Claimed!', () => stakingRewardsContract.claimReward(currentIncentive.key.rewardToken, address, reward));\n      next();\n    } catch (e) {\n      console.warn(e);\n    } finally {\n      setIsWorking(null);\n    }\n  }, [currentIncentive, address, stakingRewardsContract, tx]);\n  const withdraw = useCallback(async next => {\n    if (!(stakingRewardsContract && address)) return;\n\n    try {\n      setIsWorking('Withdrawing...');\n      await tx('Withdrawing...', 'Withdrew!', () => stakingRewardsContract.withdrawToken(tokenId, address, []));\n      next();\n    } catch (e) {\n      console.warn(e);\n    } finally {\n      setIsWorking(null);\n    }\n  }, [tokenId, address, stakingRewardsContract, tx]);\n  return {\n    isWorking,\n    approve,\n    transfer,\n    stake,\n    unstake,\n    claim,\n    withdraw\n  };\n};\n\n_s(usePosition, \"bhihzi/MAhRad4ElPTjAapHG+OM=\", false, function () {\n  return [useNotifications, useWallet, useContracts, useData];\n});\n\nexport default usePosition;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/MAXBID/src/hooks/usePosition.tsx"],"names":["useCallback","useState","useWallet","useContracts","useNotifications","useData","usePosition","tokenId","tx","address","nftManagerPositionsContract","stakingRewardsContract","currentIncentive","isWorking","setIsWorking","approve","next","e","console","warn","transfer","stake","stakeToken","key","unstake","unstakeToken","claim","reward","rewards","rewardToken","claimReward","withdraw","withdrawToken"],"mappings":"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","sourcesContent":["import { useCallback, useState } from 'react';\n\nimport { useWallet } from 'contexts/wallet';\nimport { useContracts } from 'contexts/contracts';\nimport { useNotifications } from 'contexts/notifications';\nimport { useData } from 'contexts/data';\n\nconst usePosition = (tokenId: number) => {\n  const { tx } = useNotifications();\n  const { address } = useWallet();\n  const {\n    nftManagerPositionsContract,\n    stakingRewardsContract,\n  } = useContracts();\n  const { currentIncentive } = useData();\n\n  const [isWorking, setIsWorking] = useState<string | null>(null);\n\n  const approve = useCallback(\n    async (next: () => void) => {\n      if (\n        !(\n          nftManagerPositionsContract &&\n          stakingRewardsContract &&\n          currentIncentive\n        )\n      )\n        return;\n\n      try {\n        setIsWorking('Approving...');\n        await tx('Approving...', 'Approved!', () =>\n          nftManagerPositionsContract.approve(\n            stakingRewardsContract.address,\n            tokenId\n          )\n        );\n        next();\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setIsWorking(null);\n      }\n    },\n    [\n      tokenId,\n      currentIncentive,\n      stakingRewardsContract,\n      nftManagerPositionsContract,\n      tx,\n    ]\n  );\n\n  const transfer = useCallback(\n    async (next: () => void) => {\n      if (\n        !(\n          address &&\n          nftManagerPositionsContract &&\n          stakingRewardsContract &&\n          currentIncentive\n        )\n      )\n        return;\n\n      try {\n        setIsWorking('Transfering...');\n        await tx(\n          'Transfering...',\n          'Transfered!',\n          () =>\n            nftManagerPositionsContract[\n              'safeTransferFrom(address,address,uint256)'\n            ](address, stakingRewardsContract.address, tokenId) // https://stackoverflow.com/questions/68289806/no-safetransferfrom-function-in-ethers-js-contract-instance\n        );\n        next();\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setIsWorking(null);\n      }\n    },\n    [\n      tokenId,\n      currentIncentive,\n      stakingRewardsContract,\n      nftManagerPositionsContract,\n      address,\n      tx,\n    ]\n  );\n\n  const stake = useCallback(\n    async (next: () => void) => {\n      if (!(stakingRewardsContract && currentIncentive)) return;\n\n      try {\n        setIsWorking('Staking...');\n        await tx('Staking...', 'Staked!', () =>\n          stakingRewardsContract.stakeToken(currentIncentive.key, tokenId)\n        );\n        next();\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setIsWorking(null);\n      }\n    },\n    [tokenId, currentIncentive, stakingRewardsContract, tx]\n  );\n\n  const unstake = useCallback(\n    async (next: () => void) => {\n      if (!(stakingRewardsContract && currentIncentive)) return;\n\n      try {\n        setIsWorking('Unstaking...');\n        await tx('Unstaking...', 'Unstaked!', () =>\n          stakingRewardsContract.unstakeToken(currentIncentive.key, tokenId)\n        );\n        next();\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setIsWorking(null);\n      }\n    },\n    [tokenId, currentIncentive, stakingRewardsContract, tx]\n  );\n\n  const claim = useCallback(\n    async (next: () => void) => {\n      if (!(stakingRewardsContract && currentIncentive && address)) return;\n\n      try {\n        setIsWorking('Claiming...');\n        const reward = await stakingRewardsContract.rewards(\n          currentIncentive.key.rewardToken,\n          address\n        );\n        await tx('Claiming...', 'Claimed!', () =>\n          stakingRewardsContract.claimReward(\n            currentIncentive.key.rewardToken,\n            address,\n            reward\n          )\n        );\n        next();\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setIsWorking(null);\n      }\n    },\n    [currentIncentive, address, stakingRewardsContract, tx]\n  );\n\n  const withdraw = useCallback(\n    async (next: () => void) => {\n      if (!(stakingRewardsContract && address)) return;\n\n      try {\n        setIsWorking('Withdrawing...');\n        await tx('Withdrawing...', 'Withdrew!', () =>\n          stakingRewardsContract.withdrawToken(tokenId, address, [])\n        );\n        next();\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setIsWorking(null);\n      }\n    },\n    [tokenId, address, stakingRewardsContract, tx]\n  );\n\n  return { isWorking, approve, transfer, stake, unstake, claim, withdraw };\n};\n\nexport default usePosition;\n"]},"metadata":{},"sourceType":"module"}
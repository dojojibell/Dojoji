{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useMemo, useEffect } from 'react';\nimport * as ethers from 'ethers';\nimport ERC20_CONTRACT_ABI from 'abis/erc20.json';\nimport { useWallet } from 'contexts/wallet';\nimport { sleep } from 'utils/promise';\nimport { toBigNumber } from 'utils/big-number';\n\nconst useTokenInfo = tokenAddress => {\n  _s();\n\n  const [balance, setBalance] = useState(toBigNumber('0'));\n  const [decimals, setDecimals] = useState(null);\n  const [symbol, setSymbol] = useState(null);\n  const {\n    address,\n    signer\n  } = useWallet();\n  const contract = useMemo(() => signer && tokenAddress && new ethers.Contract(tokenAddress, ERC20_CONTRACT_ABI, signer), [tokenAddress, signer]);\n  useEffect(() => {\n    if (!(contract && address)) return;\n\n    const onBalanceChange = async (from, to) => {\n      if (from === address || to === address) {\n        await sleep(500);\n        setBalance(toBigNumber(await contract.balanceOf(address)));\n      }\n    };\n\n    const load = async () => {\n      if (!(contract && address)) return;\n      const [decimals, symbol, balance] = await Promise.all([contract.decimals(), contract.symbol(), contract.balanceOf(address)]);\n      setDecimals(decimals);\n      setSymbol(symbol);\n      setBalance(toBigNumber(balance));\n    };\n\n    const subscribe = () => {\n      if (!contract) return () => {};\n      const transferEvent = contract.filters.Transfer();\n      contract.on(transferEvent, onBalanceChange);\n      return () => {\n        contract.off(transferEvent, onBalanceChange);\n      };\n    };\n\n    load();\n    return subscribe();\n  }, [contract, address]);\n  return {\n    symbol,\n    decimals,\n    balance\n  };\n};\n\n_s(useTokenInfo, \"M84MERiJWTQgNhlHeETxDK6EJ1c=\", false, function () {\n  return [useWallet];\n});\n\nexport default useTokenInfo;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/MAXBID/src/hooks/useTokenInfo.tsx"],"names":["useState","useMemo","useEffect","ethers","ERC20_CONTRACT_ABI","useWallet","sleep","toBigNumber","useTokenInfo","tokenAddress","balance","setBalance","decimals","setDecimals","symbol","setSymbol","address","signer","contract","Contract","onBalanceChange","from","to","balanceOf","load","Promise","all","subscribe","transferEvent","filters","Transfer","on","off"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,OAAnB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AACA,OAAOC,kBAAP,MAA+B,iBAA/B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,WAAT,QAA4B,kBAA5B;;AAEA,MAAMC,YAAY,GAAIC,YAAD,IAAiC;AAAA;;AACpD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAACO,WAAW,CAAC,GAAD,CAAZ,CAAtC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAgB,IAAhB,CAAxC;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAgB,IAAhB,CAApC;AACA,QAAM;AAAEgB,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAsBZ,SAAS,EAArC;AAEA,QAAMa,QAAQ,GAAGjB,OAAO,CACtB,MACEgB,MAAM,IACNR,YADA,IAEA,IAAIN,MAAM,CAACgB,QAAX,CAAoBV,YAApB,EAAkCL,kBAAlC,EAAsDa,MAAtD,CAJoB,EAKtB,CAACR,YAAD,EAAeQ,MAAf,CALsB,CAAxB;AAQAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,EAAEgB,QAAQ,IAAIF,OAAd,CAAJ,EAA4B;;AAE5B,UAAMI,eAAe,GAAG,OAAOC,IAAP,EAAqBC,EAArB,KAAoC;AAC1D,UAAID,IAAI,KAAKL,OAAT,IAAoBM,EAAE,KAAKN,OAA/B,EAAwC;AACtC,cAAMV,KAAK,CAAC,GAAD,CAAX;AACAK,QAAAA,UAAU,CAACJ,WAAW,CAAC,MAAMW,QAAQ,CAACK,SAAT,CAAmBP,OAAnB,CAAP,CAAZ,CAAV;AACD;AACF,KALD;;AAOA,UAAMQ,IAAI,GAAG,YAAY;AACvB,UAAI,EAAEN,QAAQ,IAAIF,OAAd,CAAJ,EAA4B;AAC5B,YAAM,CAACJ,QAAD,EAAWE,MAAX,EAAmBJ,OAAnB,IAA8B,MAAMe,OAAO,CAACC,GAAR,CAAY,CACpDR,QAAQ,CAACN,QAAT,EADoD,EAEpDM,QAAQ,CAACJ,MAAT,EAFoD,EAGpDI,QAAQ,CAACK,SAAT,CAAmBP,OAAnB,CAHoD,CAAZ,CAA1C;AAKAH,MAAAA,WAAW,CAACD,QAAD,CAAX;AACAG,MAAAA,SAAS,CAACD,MAAD,CAAT;AACAH,MAAAA,UAAU,CAACJ,WAAW,CAACG,OAAD,CAAZ,CAAV;AACD,KAVD;;AAYA,UAAMiB,SAAS,GAAG,MAAM;AACtB,UAAI,CAACT,QAAL,EAAe,OAAO,MAAM,CAAE,CAAf;AACf,YAAMU,aAAa,GAAGV,QAAQ,CAACW,OAAT,CAAiBC,QAAjB,EAAtB;AACAZ,MAAAA,QAAQ,CAACa,EAAT,CAAYH,aAAZ,EAA2BR,eAA3B;AACA,aAAO,MAAM;AACXF,QAAAA,QAAQ,CAACc,GAAT,CAAaJ,aAAb,EAA4BR,eAA5B;AACD,OAFD;AAGD,KAPD;;AASAI,IAAAA,IAAI;AACJ,WAAOG,SAAS,EAAhB;AACD,GAjCQ,EAiCN,CAACT,QAAD,EAAWF,OAAX,CAjCM,CAAT;AAmCA,SAAO;AACLF,IAAAA,MADK;AAELF,IAAAA,QAFK;AAGLF,IAAAA;AAHK,GAAP;AAKD,CAtDD;;GAAMF,Y;UAIwBH,S;;;AAoD9B,eAAeG,YAAf","sourcesContent":["import { useState, useMemo, useEffect } from 'react';\nimport * as ethers from 'ethers';\nimport ERC20_CONTRACT_ABI from 'abis/erc20.json';\nimport { useWallet } from 'contexts/wallet';\nimport { sleep } from 'utils/promise';\nimport { toBigNumber } from 'utils/big-number';\n\nconst useTokenInfo = (tokenAddress: string | null) => {\n  const [balance, setBalance] = useState(toBigNumber('0'));\n  const [decimals, setDecimals] = useState<number | null>(null);\n  const [symbol, setSymbol] = useState<string | null>(null);\n  const { address, signer } = useWallet();\n\n  const contract = useMemo(\n    () =>\n      signer &&\n      tokenAddress &&\n      new ethers.Contract(tokenAddress, ERC20_CONTRACT_ABI, signer),\n    [tokenAddress, signer]\n  );\n\n  useEffect(() => {\n    if (!(contract && address)) return;\n\n    const onBalanceChange = async (from: string, to: string) => {\n      if (from === address || to === address) {\n        await sleep(500);\n        setBalance(toBigNumber(await contract.balanceOf(address)));\n      }\n    };\n\n    const load = async () => {\n      if (!(contract && address)) return;\n      const [decimals, symbol, balance] = await Promise.all([\n        contract.decimals(),\n        contract.symbol(),\n        contract.balanceOf(address),\n      ]);\n      setDecimals(decimals);\n      setSymbol(symbol);\n      setBalance(toBigNumber(balance));\n    };\n\n    const subscribe = () => {\n      if (!contract) return () => {};\n      const transferEvent = contract.filters.Transfer();\n      contract.on(transferEvent, onBalanceChange);\n      return () => {\n        contract.off(transferEvent, onBalanceChange);\n      };\n    };\n\n    load();\n    return subscribe();\n  }, [contract, address]);\n\n  return {\n    symbol,\n    decimals,\n    balance,\n  };\n};\n\nexport default useTokenInfo;\n"]},"metadata":{},"sourceType":"module"}
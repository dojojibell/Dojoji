{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/Dojoji/src/contexts/notifications.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, createContext } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationsContext = /*#__PURE__*/createContext(null);\nexport const NotificationsProvider = ({\n  children\n}) => {\n  _s();\n\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n\n  const showTxNotification = (description, hash) => {\n    enqueueSnackbar({\n      type: 'tx',\n      description,\n      hash\n    }, {\n      persist: true\n    });\n  };\n\n  const showErrorNotification = msg => {\n    var _msg$error;\n\n    enqueueSnackbar({\n      type: 'error',\n      message: (msg === null || msg === void 0 ? void 0 : (_msg$error = msg.error) === null || _msg$error === void 0 ? void 0 : _msg$error.message) || msg.responseText || msg.message || msg\n    }, {\n      persist: true\n    });\n  };\n\n  const showSuccessNotification = (title, message) => {\n    enqueueSnackbar({\n      type: 'success',\n      title,\n      message\n    }, {\n      persist: true\n    });\n  };\n\n  const tx = async (startNotification, endNotification, makeTx) => {\n    try {\n      const {\n        hash,\n        wait\n      } = await makeTx();\n      showTxNotification(startNotification, hash);\n      await wait();\n      showTxNotification(endNotification, hash);\n    } catch (e) {\n      showErrorNotification(e);\n      throw e;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(NotificationsContext.Provider, {\n    value: {\n      showTxNotification,\n      showErrorNotification,\n      showSuccessNotification,\n      tx\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NotificationsProvider, \"EOBaWbrlhJsnjjf+SgNfGhR5FU4=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = NotificationsProvider;\nexport function useNotifications() {\n  _s2();\n\n  const context = useContext(NotificationsContext);\n\n  if (!context) {\n    throw new Error('Missing Notifications context');\n  }\n\n  const {\n    showTxNotification,\n    showErrorNotification,\n    showSuccessNotification,\n    tx\n  } = context;\n  return {\n    showTxNotification,\n    showErrorNotification,\n    showSuccessNotification,\n    tx\n  };\n}\n\n_s2(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"NotificationsProvider\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Dojoji/src/contexts/notifications.tsx"],"names":["useContext","createContext","useSnackbar","NotificationsContext","NotificationsProvider","children","enqueueSnackbar","showTxNotification","description","hash","type","persist","showErrorNotification","msg","message","error","responseText","showSuccessNotification","title","tx","startNotification","endNotification","makeTx","wait","e","useNotifications","context","Error"],"mappings":";;;;AAAA,SAAaA,UAAb,EAAyBC,aAAzB,QAAyD,OAAzD;AACA,SAASC,WAAT,QAA4B,WAA5B;;AAEA,MAAMC,oBAAoB,gBAAGF,aAAa,CAShC,IATgC,CAA1C;AAWA,OAAO,MAAMG,qBAAkD,GAAG,CAAC;AACjEC,EAAAA;AADiE,CAAD,KAE5D;AAAA;;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAsBJ,WAAW,EAAvC;;AAEA,QAAMK,kBAAkB,GAAG,CAACC,WAAD,EAAsBC,IAAtB,KAAuC;AAChEH,IAAAA,eAAe,CACb;AAAEI,MAAAA,IAAI,EAAE,IAAR;AAAcF,MAAAA,WAAd;AAA2BC,MAAAA;AAA3B,KADa,EAEb;AACEE,MAAAA,OAAO,EAAE;AADX,KAFa,CAAf;AAMD,GAPD;;AASA,QAAMC,qBAAqB,GAAIC,GAAD,IAAc;AAAA;;AAC1CP,IAAAA,eAAe,CACb;AACEI,MAAAA,IAAI,EAAE,OADR;AAEEI,MAAAA,OAAO,EAAE,CAAAD,GAAG,SAAH,IAAAA,GAAG,WAAH,0BAAAA,GAAG,CAAEE,KAAL,0DAAYD,OAAZ,KAAuBD,GAAG,CAACG,YAA3B,IAA2CH,GAAG,CAACC,OAA/C,IAA0DD;AAFrE,KADa,EAKb;AACEF,MAAAA,OAAO,EAAE;AADX,KALa,CAAf;AASD,GAVD;;AAYA,QAAMM,uBAAuB,GAAG,CAACC,KAAD,EAAgBJ,OAAhB,KAAoC;AAClER,IAAAA,eAAe,CACb;AACEI,MAAAA,IAAI,EAAE,SADR;AAEEQ,MAAAA,KAFF;AAGEJ,MAAAA;AAHF,KADa,EAMb;AACEH,MAAAA,OAAO,EAAE;AADX,KANa,CAAf;AAUD,GAXD;;AAaA,QAAMQ,EAAE,GAAG,OACTC,iBADS,EAETC,eAFS,EAGTC,MAHS,KAIN;AACH,QAAI;AACF,YAAM;AAAEb,QAAAA,IAAF;AAAQc,QAAAA;AAAR,UAAiB,MAAMD,MAAM,EAAnC;AACAf,MAAAA,kBAAkB,CAACa,iBAAD,EAAoBX,IAApB,CAAlB;AACA,YAAMc,IAAI,EAAV;AACAhB,MAAAA,kBAAkB,CAACc,eAAD,EAAkBZ,IAAlB,CAAlB;AACD,KALD,CAKE,OAAOe,CAAP,EAAU;AACVZ,MAAAA,qBAAqB,CAACY,CAAD,CAArB;AACA,YAAMA,CAAN;AACD;AACF,GAdD;;AAgBA,sBACE,QAAC,oBAAD,CAAsB,QAAtB;AACE,IAAA,KAAK,EAAE;AACLjB,MAAAA,kBADK;AAELK,MAAAA,qBAFK;AAGLK,MAAAA,uBAHK;AAILE,MAAAA;AAJK,KADT;AAAA,cAQGd;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAnEM;;GAAMD,qB;UAGiBF,W;;;KAHjBE,qB;AAqEb,OAAO,SAASqB,gBAAT,GAA4B;AAAA;;AACjC,QAAMC,OAAO,GAAG1B,UAAU,CAACG,oBAAD,CAA1B;;AACA,MAAI,CAACuB,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AACD,QAAM;AACJpB,IAAAA,kBADI;AAEJK,IAAAA,qBAFI;AAGJK,IAAAA,uBAHI;AAIJE,IAAAA;AAJI,MAKFO,OALJ;AAMA,SAAO;AACLnB,IAAAA,kBADK;AAELK,IAAAA,qBAFK;AAGLK,IAAAA,uBAHK;AAILE,IAAAA;AAJK,GAAP;AAMD;;IAjBeM,gB","sourcesContent":["import { FC, useContext, createContext, ReactNode } from 'react';\nimport { useSnackbar } from 'notistack';\n\nconst NotificationsContext = createContext<{\n  showTxNotification: (description: string, hash: string) => void;\n  showErrorNotification: (msg: any) => void;\n  showSuccessNotification: (title: string, message: string) => void;\n  tx: (\n    startNotification: string,\n    endNotification: string,\n    makeTx: () => { hash: string; wait: () => Promise<any> }\n  ) => void;\n} | null>(null);\n\nexport const NotificationsProvider: FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const showTxNotification = (description: string, hash: string) => {\n    enqueueSnackbar(\n      { type: 'tx', description, hash },\n      {\n        persist: true,\n      }\n    );\n  };\n\n  const showErrorNotification = (msg: any) => {\n    enqueueSnackbar(\n      {\n        type: 'error',\n        message: msg?.error?.message || msg.responseText || msg.message || msg,\n      },\n      {\n        persist: true,\n      }\n    );\n  };\n\n  const showSuccessNotification = (title: string, message: string) => {\n    enqueueSnackbar(\n      {\n        type: 'success',\n        title,\n        message,\n      },\n      {\n        persist: true,\n      }\n    );\n  };\n\n  const tx = async (\n    startNotification: string,\n    endNotification: string,\n    makeTx: () => { hash: string; wait: () => Promise<any> }\n  ) => {\n    try {\n      const { hash, wait } = await makeTx();\n      showTxNotification(startNotification, hash);\n      await wait();\n      showTxNotification(endNotification, hash);\n    } catch (e) {\n      showErrorNotification(e);\n      throw e;\n    }\n  };\n\n  return (\n    <NotificationsContext.Provider\n      value={{\n        showTxNotification,\n        showErrorNotification,\n        showSuccessNotification,\n        tx,\n      }}\n    >\n      {children}\n    </NotificationsContext.Provider>\n  );\n};\n\nexport function useNotifications() {\n  const context = useContext(NotificationsContext);\n  if (!context) {\n    throw new Error('Missing Notifications context');\n  }\n  const {\n    showTxNotification,\n    showErrorNotification,\n    showSuccessNotification,\n    tx,\n  } = context;\n  return {\n    showTxNotification,\n    showErrorNotification,\n    showSuccessNotification,\n    tx,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
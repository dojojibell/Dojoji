{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/MAXBID/src/contexts/contracts.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, useMemo, createContext } from 'react';\nimport { ethers } from 'ethers';\nimport { TOKEN_0_ADDRESS, TOKEN_1_ADDRESS, NFT_POSITIONS_MANAGER_ADDRESS, STAKING_REWARDS_ADDRESS, SAUDI_ADDRESS, MAXBID_ADDRESS } from 'config';\nimport { useWallet } from 'contexts/wallet';\nimport useTokenInfo from 'hooks/useTokenInfo';\nimport NFT_POSITIONS_MANAGER_ABI from 'abis/nft_positions_manager.json';\nimport STAKING_REWARDS_ABI from 'abis/staking_rewards.json';\nimport SAUDIS_ABI from 'abis/saudis.json';\nimport MAXBID_ABI from 'abis/saudis.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContractsContext = /*#__PURE__*/createContext(null);\nexport const ContractsProvider = ({\n  children\n}) => {\n  _s();\n\n  const {\n    network,\n    signer\n  } = useWallet();\n  const token0Address = !network ? null : TOKEN_0_ADDRESS[network];\n  const token1Address = !network ? null : TOKEN_1_ADDRESS[network];\n  const {\n    decimals: token0Decimals,\n    symbol: token0Symbol\n  } = useTokenInfo(token0Address);\n  const {\n    decimals: token1Decimals,\n    symbol: token1Symbol\n  } = useTokenInfo(token1Address);\n  const nftManagerPositionsAddress = !network ? null : NFT_POSITIONS_MANAGER_ADDRESS[network];\n  const stakingRewardsAddress = !network ? null : STAKING_REWARDS_ADDRESS[network];\n  const saudisAddress = !network ? null : SAUDI_ADDRESS[network];\n  const maxbidAddress = !network ? null : MAXBID_ADDRESS[network];\n  const nftManagerPositionsContract = useMemo(() => !(nftManagerPositionsAddress && signer) ? null : new ethers.Contract(nftManagerPositionsAddress, NFT_POSITIONS_MANAGER_ABI, signer), [nftManagerPositionsAddress, signer]);\n  const stakingRewardsContract = useMemo(() => !(stakingRewardsAddress && signer) ? null : new ethers.Contract(stakingRewardsAddress, STAKING_REWARDS_ABI, signer), [stakingRewardsAddress, signer]);\n  const maxbidContract = useMemo(() => !(maxbidAddress && signer) ? null : new ethers.Contract(maxbidAddress, MAXBID_ABI, signer), [maxbidAddress, signer]);\n  const saudisContract = useMemo(() => !(saudisAddress && signer) ? null : new ethers.Contract(saudisAddress, SAUDIS_ABI, signer), [saudisAddress, signer]);\n  return /*#__PURE__*/_jsxDEV(ContractsContext.Provider, {\n    value: {\n      token0Address,\n      token1Address,\n      token0Decimals,\n      token1Decimals,\n      token0Symbol,\n      token1Symbol,\n      stakingRewardsContract,\n      nftManagerPositionsContract,\n      saudisContract,\n      maxbidContract\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContractsProvider, \"fNZyqcaTsDmoY8atSDyDyZnTbHk=\", false, function () {\n  return [useWallet, useTokenInfo, useTokenInfo];\n});\n\n_c = ContractsProvider;\nexport function useContracts() {\n  _s2();\n\n  const context = useContext(ContractsContext);\n\n  if (!context) {\n    throw new Error('Missing Contracts context');\n  }\n\n  const {\n    token0Address,\n    token1Address,\n    token0Decimals,\n    token1Decimals,\n    token0Symbol,\n    token1Symbol,\n    stakingRewardsContract,\n    nftManagerPositionsContract,\n    saudisContract,\n    maxbidContract\n  } = context;\n  return {\n    token0Address,\n    token1Address,\n    token0Decimals,\n    token1Decimals,\n    token0Symbol,\n    token1Symbol,\n    stakingRewardsContract,\n    nftManagerPositionsContract,\n    saudisContract,\n    maxbidContract\n  };\n}\n\n_s2(useContracts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractsProvider\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/MAXBID/src/contexts/contracts.tsx"],"names":["useContext","useMemo","createContext","ethers","TOKEN_0_ADDRESS","TOKEN_1_ADDRESS","NFT_POSITIONS_MANAGER_ADDRESS","STAKING_REWARDS_ADDRESS","SAUDI_ADDRESS","MAXBID_ADDRESS","useWallet","useTokenInfo","NFT_POSITIONS_MANAGER_ABI","STAKING_REWARDS_ABI","SAUDIS_ABI","MAXBID_ABI","ContractsContext","ContractsProvider","children","network","signer","token0Address","token1Address","decimals","token0Decimals","symbol","token0Symbol","token1Decimals","token1Symbol","nftManagerPositionsAddress","stakingRewardsAddress","saudisAddress","maxbidAddress","nftManagerPositionsContract","Contract","stakingRewardsContract","maxbidContract","saudisContract","useContracts","context","Error"],"mappings":"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","sourcesContent":["import { FC, useContext, useMemo, createContext, ReactNode } from 'react';\nimport { ethers } from 'ethers';\n\nimport {\n  TOKEN_0_ADDRESS,\n  TOKEN_1_ADDRESS,\n  NFT_POSITIONS_MANAGER_ADDRESS,\n  STAKING_REWARDS_ADDRESS,\n  SAUDI_ADDRESS,\n  MAXBID_ADDRESS,\n} from 'config';\nimport { useWallet } from 'contexts/wallet';\nimport useTokenInfo from 'hooks/useTokenInfo';\nimport NFT_POSITIONS_MANAGER_ABI from 'abis/nft_positions_manager.json';\nimport STAKING_REWARDS_ABI from 'abis/staking_rewards.json';\nimport SAUDIS_ABI from 'abis/saudis.json';\nimport MAXBID_ABI from 'abis/saudis.json';\nconst ContractsContext = createContext<{\n  token0Address: string | null;\n  token1Address: string | null;\n  token0Decimals: number | null;\n  token1Decimals: number | null;\n  token0Symbol: string | null;\n  token1Symbol: string | null;\n  stakingRewardsContract: ethers.Contract | null;\n  saudisContract: ethers.Contract | null;\n  maxbidContract: ethers.Contract | null;\n  nftManagerPositionsContract: ethers.Contract | null;\n} | null>(null);\n\nexport const ContractsProvider: FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const { network, signer } = useWallet();\n\n  const token0Address = !network ? null : TOKEN_0_ADDRESS[network];\n  const token1Address = !network ? null : TOKEN_1_ADDRESS[network];\n\n  const { decimals: token0Decimals, symbol: token0Symbol } = useTokenInfo(\n    token0Address\n  );\n  const { decimals: token1Decimals, symbol: token1Symbol } = useTokenInfo(\n    token1Address\n  );\n\n  const nftManagerPositionsAddress = !network\n    ? null\n    : NFT_POSITIONS_MANAGER_ADDRESS[network];\n  const stakingRewardsAddress = !network\n    ? null\n    : STAKING_REWARDS_ADDRESS[network];\n\n  const saudisAddress = !network ? null : SAUDI_ADDRESS[network];\n\n  const maxbidAddress = !network ? null : MAXBID_ADDRESS[network];\n\n  const nftManagerPositionsContract = useMemo(\n    () =>\n      !(nftManagerPositionsAddress && signer)\n        ? null\n        : new ethers.Contract(\n            nftManagerPositionsAddress,\n            NFT_POSITIONS_MANAGER_ABI,\n            signer\n          ),\n    [nftManagerPositionsAddress, signer]\n  );\n\n  const stakingRewardsContract = useMemo(\n    () =>\n      !(stakingRewardsAddress && signer)\n        ? null\n        : new ethers.Contract(\n            stakingRewardsAddress,\n            STAKING_REWARDS_ABI,\n            signer\n          ),\n    [stakingRewardsAddress, signer]\n  );\n\n  const maxbidContract = useMemo(\n    () =>\n      !(maxbidAddress && signer)\n        ? null\n        : new ethers.Contract(maxbidAddress, MAXBID_ABI, signer),\n    [maxbidAddress, signer]\n  );\n  const saudisContract = useMemo(\n    () =>\n      !(saudisAddress && signer)\n        ? null\n        : new ethers.Contract(saudisAddress, SAUDIS_ABI, signer),\n    [saudisAddress, signer]\n  );\n  return (\n    <ContractsContext.Provider\n      value={{\n        token0Address,\n        token1Address,\n        token0Decimals,\n        token1Decimals,\n        token0Symbol,\n        token1Symbol,\n        stakingRewardsContract,\n        nftManagerPositionsContract,\n        saudisContract,\n        maxbidContract,\n      }}\n    >\n      {children}\n    </ContractsContext.Provider>\n  );\n};\n\nexport function useContracts() {\n  const context = useContext(ContractsContext);\n  if (!context) {\n    throw new Error('Missing Contracts context');\n  }\n  const {\n    token0Address,\n    token1Address,\n    token0Decimals,\n    token1Decimals,\n    token0Symbol,\n    token1Symbol,\n    stakingRewardsContract,\n    nftManagerPositionsContract,\n    saudisContract,\n    maxbidContract,\n  } = context;\n\n  return {\n    token0Address,\n    token1Address,\n    token0Decimals,\n    token1Decimals,\n    token0Symbol,\n    token1Symbol,\n    stakingRewardsContract,\n    nftManagerPositionsContract,\n    saudisContract,\n    maxbidContract,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}